# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'conv.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from datetime import datetime
from pycbrf import ExchangeRates


class UiMainWindow(object):
    def __init__(self):
        self.date = datetime.now()
        self.rates = ExchangeRates(self.date).rates
        self.rub = "Российский рубль"

        MainWindow.setObjectName("MainWindow")
        MainWindow.setFixedSize(800, 500)
        font = QtGui.QFont()
        font.setPointSize(20)
        MainWindow.setFont(font)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label_name = QtWidgets.QLabel(self.centralwidget)
        self.label_name.setGeometry(QtCore.QRect(0, 0, 801, 71))
        font = QtGui.QFont()
        font.setPointSize(25)
        self.label_name.setFont(font)
        self.label_name.setStyleSheet("background-color: rgb(204, 204, 204);")
        self.label_name.setAlignment(QtCore.Qt.AlignCenter)
        self.label_name.setObjectName("label_name")
        self.comboBox_from = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_from.setGeometry(QtCore.QRect(20, 240, 291, 22))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.comboBox_from.setFont(font)
        self.comboBox_from.setObjectName("comboBox_from")
        self.comboBox_from.addItem(self.rub)
        for i in range(len(self.rates)):
            self.comboBox_from.addItem(self.rates[i][1])
        self.comboBox_from.setCurrentText(self.rub)
        self.label_from = QtWidgets.QLabel(self.centralwidget)
        self.label_from.setGeometry(QtCore.QRect(150, 200, 31, 21))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_from.setFont(font)
        self.label_from.setObjectName("label_from")
        self.label_to = QtWidgets.QLabel(self.centralwidget)
        self.label_to.setGeometry(QtCore.QRect(590, 200, 21, 21))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_to.setFont(font)
        self.label_to.setObjectName("label_to")
        self.comboBox_to = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_to.setGeometry(QtCore.QRect(460, 240, 291, 22))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.comboBox_to.setFont(font)
        self.comboBox_to.setObjectName("comboBox_to")
        self.comboBox_to.addItem(self.rub)
        for i in range(len(self.rates)):
            self.comboBox_to.addItem(self.rates[i][1])
        self.comboBox_to.setCurrentText(self.rates[10][1])  # 10 is US Dollar; 11 is Euro
        self.lineEdit_quantity = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_quantity.setGeometry(QtCore.QRect(410, 120, 261, 31))
        self.lineEdit_quantity.setObjectName("lineEdit_quantity")
        self.lineEdit_quantity.setAlignment(QtCore.Qt.AlignRight)
        self.pushButton_clear = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_clear.setGeometry(QtCore.QRect(680, 119, 100, 33))
        self.pushButton_clear.setToolTip("Очищает поле ввода")
        font = QtGui.QFont()
        font.setPointSize(15)
        self.pushButton_clear.setFont(font)
        self.pushButton_clear.setObjectName("pushButton_clear")
        self.label_quantity = QtWidgets.QLabel(self.centralwidget)
        self.label_quantity.setGeometry(QtCore.QRect(80, 120, 291, 31))
        font = QtGui.QFont()
        font.setPointSize(23)
        self.label_quantity.setFont(font)
        self.label_quantity.setObjectName("label_quantity")
        self.lineEdit_quantity.setFocus()
        self.label_result = QtWidgets.QLabel(self.centralwidget)
        self.label_result.setGeometry(QtCore.QRect(160, 410, 161, 41))
        font = QtGui.QFont()
        font.setPointSize(25)
        self.label_result.setFont(font)
        self.label_result.setObjectName("label_result")
        self.lineEdit_result = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_result.setGeometry(QtCore.QRect(410, 420, 261, 31))
        self.lineEdit_result.setObjectName("lineEdit_result")
        self.lineEdit_result.setAlignment(QtCore.Qt.AlignRight)
        self.lineEdit_result.setReadOnly(True)
        self.pushButton_swap = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_swap.setGeometry(QtCore.QRect(350, 239, 75, 24))
        self.pushButton_swap.setObjectName("pushButton_swap")
        self.pushButton_swap.setToolTip("Поменять валюты местами")
        self.pushButton_convert = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_convert.setGeometry(QtCore.QRect(270, 320, 231, 61))
        self.pushButton_convert.setObjectName("pushButton_convert")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslate_ui()
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.pushButton_convert.clicked.connect(lambda: self.counting())
        self.pushButton_swap.clicked.connect(lambda: self.swapping())
        self.pushButton_clear.clicked.connect(lambda: self.cls())
        self.lineEdit_quantity.editingFinished.connect(lambda: self.counting())

    def retranslate_ui(self):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Currency Converter"))
        MainWindow.setWindowIcon(QtGui.QIcon("icon.png"))
        self.label_name.setText(_translate("MainWindow", "Конвертер валют"))
        self.label_from.setText(_translate("MainWindow", "Из"))
        self.label_to.setText(_translate("MainWindow", "В"))
        self.label_quantity.setText(_translate("MainWindow", "Введите количество"))
        self.label_result.setText(_translate("MainWindow", "Результат"))
        self.pushButton_swap.setText(_translate("MainWindow", "⇄"))
        self.pushButton_convert.setText(_translate("MainWindow", "Конвертировать"))
        self.pushButton_clear.setText(_translate("MainWindow", "Очистить"))

    def cls(self):
        self.lineEdit_quantity.setText("")

    def counting(self):
        if self.comboBox_from.currentText() != self.rub and self.comboBox_to.currentText() != self.rub:
            self.currencies()
        else:
            self.rubble()

    def rubble(self):
        first = self.comboBox_from.currentText()
        second = self.comboBox_to.currentText()
        n = self.lineEdit_quantity.text()
        if n == "":
            n = 0
        if first == self.rub:
            for j in range(len(self.rates)):
                if self.rates[j][1] == second:
                    try:
                        self.lineEdit_result.setText(str(round(float(n) / float(self.rates[j][4]), 4)))
                    except (TypeError, Exception):
                        self.lineEdit_result.setText("ERROR")
        if second == self.rub:
            for j in range(len(self.rates)):
                if self.rates[j][1] == first:
                    try:
                        self.lineEdit_result.setText(str(round(float(n) * float(self.rates[j][4]), 4)))
                    except (TypeError, Exception):
                        self.lineEdit_result.setText("ERROR")

    def currencies(self):
        first = self.comboBox_from.currentText()
        second = self.comboBox_to.currentText()
        n = self.lineEdit_quantity.text()
        if n == "":
            n = 0
        for i in range(len(self.rates)):
            if self.rates[i][1] == first:
                for j in range(len(self.rates)):
                    if self.rates[j][1] == second:
                        try:
                            self.lineEdit_result.setText(str(round(float(self.rates[i][4]) /
                                                                   float(self.rates[j][4]) * float(n), 4)))
                        except (TypeError, Exception):
                            self.lineEdit_result.setText("ERROR")

    def swapping(self):
        tmp = self.comboBox_from.currentIndex()
        self.comboBox_from.setCurrentIndex(self.comboBox_to.currentIndex())
        self.comboBox_to.setCurrentIndex(tmp)


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = UiMainWindow()
    ui.__init__()
    MainWindow.show()
    sys.exit(app.exec_())
